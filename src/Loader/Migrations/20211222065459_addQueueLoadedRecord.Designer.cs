// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StatStore.Loader.Core.Data;

#nullable disable

namespace StatStore.Loader.Migrations
{
    [DbContext(typeof(AppScheduleContext))]
    [Migration("20211222065459_addQueueLoadedRecord")]
    partial class addQueueLoadedRecord
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StatStore.Loader.Core.Models.LoadRecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoad")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("QueueLoaded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TimeFrameLoaded")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("LoadRecord");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastLoad = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QueueLoaded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeFrameLoaded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StatStore.Loader.Core.Models.ScheduledRequest+Annual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ExecuteAt")
                        .HasColumnType("time(6)");

                    b.Property<int?>("Minutes")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasColumnType("longtext");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecuteAt");

                    b.ToTable("AnnualRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfMonth = 1,
                            ExecuteAt = new TimeSpan(0, 3, 0, 0, 0),
                            Month = 7,
                            Tag = "Timeframes"
                        });
                });

            modelBuilder.Entity("StatStore.Loader.Core.Models.ScheduledRequest+Daily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("ExecuteAt")
                        .HasColumnType("time(6)");

                    b.Property<int?>("Minutes")
                        .HasColumnType("int");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasColumnType("longtext");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecuteAt");

                    b.ToTable("DailyRequests");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ExecuteAt = new TimeSpan(0, 2, 0, 1, 0),
                            Tag = "Schedules"
                        });
                });

            modelBuilder.Entity("StatStore.Loader.Core.Models.ScheduledRequest+Monthly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ExecuteAt")
                        .HasColumnType("time(6)");

                    b.Property<int?>("Minutes")
                        .HasColumnType("int");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasColumnType("longtext");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayOfMonth");

                    b.ToTable("MonthlyRequests");
                });

            modelBuilder.Entity("StatStore.Loader.Core.Models.ScheduledRequest+Oneoff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("ExecuteAt")
                        .HasColumnType("time(6)");

                    b.Property<int?>("Minutes")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasColumnType("longtext");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OneoffRequests");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Oneoff");
                });

            modelBuilder.Entity("StatStore.Loader.Core.Models.ScheduledRequest+Queued", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("ExecuteAt")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Minutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasColumnType("longtext");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecuteAt");

                    b.HasIndex("IsCompleted");

                    b.ToTable("QueuedRequests");
                });

            modelBuilder.Entity("StatStore.Loader.Core.Models.ScheduledRequest+Weekly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("ExecuteAt")
                        .HasColumnType("time(6)");

                    b.Property<int?>("Minutes")
                        .HasColumnType("int");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasColumnType("longtext");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Day");

                    b.ToTable("WeeklyRequests");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Weekly");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = 4,
                            ExecuteAt = new TimeSpan(0, 22, 0, 0, 0),
                            Tag = "ScoresByWeek"
                        },
                        new
                        {
                            Id = 2,
                            Day = 5,
                            ExecuteAt = new TimeSpan(0, 8, 0, 0, 0),
                            Tag = "ScoresByWeek"
                        },
                        new
                        {
                            Id = 3,
                            Day = 0,
                            ExecuteAt = new TimeSpan(0, 14, 0, 0, 0),
                            Tag = "ScoresByWeek"
                        },
                        new
                        {
                            Id = 4,
                            Day = 0,
                            ExecuteAt = new TimeSpan(0, 17, 0, 0, 0),
                            Tag = "ScoresByWeek"
                        },
                        new
                        {
                            Id = 5,
                            Day = 0,
                            ExecuteAt = new TimeSpan(0, 22, 0, 0, 0),
                            Tag = "ScoresByWeek"
                        },
                        new
                        {
                            Id = 6,
                            Day = 1,
                            ExecuteAt = new TimeSpan(0, 8, 0, 0, 0),
                            Tag = "ScoresByWeek"
                        },
                        new
                        {
                            Id = 7,
                            Day = 1,
                            ExecuteAt = new TimeSpan(0, 22, 0, 0, 0),
                            Tag = "ScoresByWeek"
                        });
                });

            modelBuilder.Entity("StatStore.Loader.Core.Models.ScheduledRequest+OneoffSpan", b =>
                {
                    b.HasBaseType("StatStore.Loader.Core.Models.ScheduledRequest+Oneoff");

                    b.Property<TimeSpan>("Durration")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("Frequency")
                        .HasColumnType("time(6)");

                    b.HasDiscriminator().HasValue("OneoffSpan");
                });

            modelBuilder.Entity("StatStore.Loader.Core.Models.ScheduledRequest+WeeklySpan", b =>
                {
                    b.HasBaseType("StatStore.Loader.Core.Models.ScheduledRequest+Weekly");

                    b.Property<TimeSpan>("Durration")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("Frequency")
                        .HasColumnType("time(6)");

                    b.HasDiscriminator().HasValue("WeeklySpan");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            Day = 4,
                            ExecuteAt = new TimeSpan(0, 17, 30, 0, 0),
                            Tag = "ScoresByWeek",
                            Durration = new TimeSpan(0, 3, 0, 0, 0),
                            Frequency = new TimeSpan(0, 0, 10, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            Day = 0,
                            ExecuteAt = new TimeSpan(0, 10, 0, 0, 0),
                            Tag = "ScoresByWeek",
                            Durration = new TimeSpan(0, 6, 30, 0, 0),
                            Frequency = new TimeSpan(0, 0, 10, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            Day = 0,
                            ExecuteAt = new TimeSpan(0, 17, 30, 0, 0),
                            Tag = "ScoresByWeek",
                            Durration = new TimeSpan(0, 3, 0, 0, 0),
                            Frequency = new TimeSpan(0, 0, 10, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            Day = 1,
                            ExecuteAt = new TimeSpan(0, 17, 30, 0, 0),
                            Tag = "ScoresByWeek",
                            Durration = new TimeSpan(0, 3, 0, 0, 0),
                            Frequency = new TimeSpan(0, 0, 10, 0, 0)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
